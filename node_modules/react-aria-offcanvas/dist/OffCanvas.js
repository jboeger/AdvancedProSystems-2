"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _runEventHandlerOnce = _interopRequireDefault(require("run-event-handler-once"));

var _focusTrap = _interopRequireDefault(require("./helpers/focusTrap"));

var _static = require("./helpers/static");

var _focusManager = require("./helpers/focusManager");

var _styles = require("./helpers/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TAB_KEY = 9;
var ESC_KEY = 27;
var EVENT_LISTENER_OPTIONS = {
  add: {
    capture: false
  },
  remove: {
    capture: false
  }
};

var OffCanvas =
/*#__PURE__*/
function (_Component) {
  _inherits(OffCanvas, _Component);

  function OffCanvas(props) {
    var _this;

    _classCallCheck(this, OffCanvas);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OffCanvas).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "open", function () {
      var _this$props = _this.props,
          returnFocusAfterClose = _this$props.returnFocusAfterClose,
          lockBodyAfterOpen = _this$props.lockBodyAfterOpen;
      (0, _styles.shouldShowContent)(_this.content, true);

      if (returnFocusAfterClose) {
        (0, _focusManager.focusLater)();
      }

      (0, _runEventHandlerOnce["default"])(_this.content, 'transitionend', function () {
        _this.setInitialFocus();
      }, EVENT_LISTENER_OPTIONS);
      (0, _styles.shouldHideHorizontalScrollbar)(true); // Lock Body scroll on component update

      lockBodyAfterOpen && (0, _styles.shouldLockBodyScroll)(true);
    });

    _defineProperty(_assertThisInitialized(_this), "close", function () {
      var _this$props2 = _this.props,
          mainContainerSelector = _this$props2.mainContainerSelector,
          returnFocusAfterClose = _this$props2.returnFocusAfterClose;

      if (returnFocusAfterClose) {
        if (mainContainerSelector) {
          (0, _runEventHandlerOnce["default"])(_this.mainContainer, 'transitionend', function () {
            // If the Open button is off the screen, returning focus
            // immediately breaks the transition. Transitionend event ensures
            // that the animation has enough time to finish.
            // then use the lock body scroll method to lock body scroll
            (0, _focusManager.returnFocus)();
            (0, _styles.shouldShowContent)(_this.content, false);
            (0, _styles.shouldHideHorizontalScrollbar)(false);
            (0, _styles.shouldLockBodyScroll)(false);
          }, EVENT_LISTENER_OPTIONS);
        } else {
          (0, _runEventHandlerOnce["default"])(_this.content, 'transitionend', function () {
            (0, _focusManager.returnFocus)();
            (0, _styles.shouldShowContent)(_this.content, false);
            (0, _styles.shouldHideHorizontalScrollbar)(false);
            (0, _styles.shouldLockBodyScroll)(false);
          }, EVENT_LISTENER_OPTIONS);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "setInitialFocus", function () {
      var _this$props3 = _this.props,
          focusFirstChildAfterOpen = _this$props3.focusFirstChildAfterOpen,
          focusThisChildAfterOpen = _this$props3.focusThisChildAfterOpen;

      if (focusFirstChildAfterOpen) {
        (0, _focusManager.focusFirstChild)(_this.content);
      } else if (focusThisChildAfterOpen) {
        (0, _focusManager.focusChild)(_this.content, focusThisChildAfterOpen);
      } else {
        _this.focusContent();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "parentHandlesClose", function (event) {
      if (_this.props.onClose) {
        _this.props.onClose(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleOverlayClick", function (event) {
      if (_this.props.closeOnOverlayClick && event.target === _this.overlay) {
        _this.parentHandlesClose(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (event) {
      if (_this.props.trapFocusAfterOpen && event.keyCode === TAB_KEY) {
        (0, _focusTrap["default"])(event, _this.content);
      }

      if (_this.props.closeOnEsc && event.keyCode === ESC_KEY) {
        event.stopPropagation();

        _this.parentHandlesClose(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "setOverlayRef", function (overlay) {
      _this.overlay = overlay;
    });

    _defineProperty(_assertThisInitialized(_this), "setContentRef", function (content) {
      _this.content = content;
    });

    _defineProperty(_assertThisInitialized(_this), "focusContent", function () {
      return _this.content && _this.content.focus();
    });

    _defineProperty(_assertThisInitialized(_this), "buildStyles", function () {
      var _this$props4 = _this.props,
          isOpen = _this$props4.isOpen,
          width = _this$props4.width,
          height = _this$props4.height,
          position = _this$props4.position,
          mainContainerSelector = _this$props4.mainContainerSelector,
          style = _this$props4.style,
          className = _this$props4.className,
          overlayClassName = _this$props4.overlayClassName;
      var extra = {
        container: OffCanvas.extraStyles.container,
        // Remove the extra styles when classNames are passed
        overlay: overlayClassName ? {} : OffCanvas.extraStyles.overlay,
        content: className ? {} : OffCanvas.extraStyles.content
      };
      var main = (0, _styles.createStyles)(OffCanvas.defaultStyles, extra, isOpen, width, height, position, style);
      var applyPushStyles = mainContainerSelector ? (0, _styles.createPushStyles)(OffCanvas.extraStyles.container, isOpen, width, height, position) : null;
      return {
        main: main,
        applyPushStyles: applyPushStyles
      };
    });

    _defineProperty(_assertThisInitialized(_this), "createOffCanvasRoot", function () {
      if (_static.canUseDOM) {
        _this.offCanvasRoot = document.createElement('div');

        _this.offCanvasRoot.setAttribute('id', 'offcanvas-root');

        _this.offCanvasRoot.dataset.testid = 'offcanvas-portal';
        document.body.appendChild(_this.offCanvasRoot);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "removeOffCanvasRoot", function () {
      return _this.offCanvasRoot && document.body.removeChild(_this.offCanvasRoot);
    });

    _this.createOffCanvasRoot();

    return _this;
  }

  _createClass(OffCanvas, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props5 = this.props,
          isOpen = _this$props5.isOpen,
          width = _this$props5.width,
          height = _this$props5.height,
          position = _this$props5.position,
          mainContainerSelector = _this$props5.mainContainerSelector,
          lockBodyAfterOpen = _this$props5.lockBodyAfterOpen;
      (0, _styles.shouldShowContent)(this.content, isOpen);

      if (mainContainerSelector) {
        // Get the element that should be pushed
        this.mainContainer = document.querySelector(mainContainerSelector); // Remove the extra styles when the main container has a className

        if ((0, _styles.hasClassName)(this.mainContainer)) {
          OffCanvas.extraStyles.container = {};
        }
      }

      if (isOpen) {
        this.setInitialFocus();

        if (mainContainerSelector) {
          // If the initial state is set to true, this is the right time to apply
          // some of the push styles to the main container.
          (0, _styles.applyInitialPushStyles)(this.mainContainer, width, height, position);
          (0, _styles.shouldHideHorizontalScrollbar)(true);
          lockBodyAfterOpen && (0, _styles.shouldLockBodyScroll)(true);
        }
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.props.isOpen && !prevProps.isOpen) {
        this.open();
      } else if (!this.props.isOpen && prevProps.isOpen) {
        this.close();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeOffCanvasRoot();
      (0, _styles.shouldHideHorizontalScrollbar)(false);
      (0, _styles.shouldLockBodyScroll)(false);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          isOpen = _this$props6.isOpen,
          role = _this$props6.role,
          label = _this$props6.label,
          labelledby = _this$props6.labelledby,
          className = _this$props6.className,
          overlayClassName = _this$props6.overlayClassName;
      var styles = this.buildStyles();

      if (styles.applyPushStyles) {
        styles.applyPushStyles(this.mainContainer);
      }

      return (0, _static.canUseRoot)(this.offCanvasRoot) && _reactDom["default"].createPortal(_react["default"].createElement("div", {
        ref: this.setOverlayRef,
        style: styles && styles.main.overlay,
        className: overlayClassName,
        onClick: this.handleOverlayClick,
        "data-testid": "overlay"
      }, _react["default"].createElement("div", {
        ref: this.setContentRef,
        style: styles && styles.main.content,
        className: className,
        onKeyDown: this.handleKeyDown,
        role: role,
        "aria-label": label,
        "aria-labelledby": labelledby,
        "aria-hidden": !isOpen,
        tabIndex: "-1",
        "data-testid": "content"
      }, this.props.children)), this.offCanvasRoot);
    }
  }]);

  return OffCanvas;
}(_react.Component);

exports["default"] = OffCanvas;

_defineProperty(OffCanvas, "defaultProps", {
  isOpen: false,
  width: '300px',
  height: '300px',
  position: 'left',
  closeOnEsc: true,
  closeOnOverlayClick: true,
  trapFocusAfterOpen: true,
  lockBodyAfterOpen: true,
  returnFocusAfterClose: true,
  style: {
    overlay: {},
    content: {}
  }
});

_defineProperty(OffCanvas, "propTypes", {
  isOpen: _propTypes["default"].bool.isRequired,
  width: _propTypes["default"].string,
  height: _propTypes["default"].string,
  position: _propTypes["default"].oneOf(['left', 'right', 'top', 'bottom']),
  mainContainerSelector: _propTypes["default"].string,
  onClose: _propTypes["default"].func,
  closeOnEsc: _propTypes["default"].bool,
  closeOnOverlayClick: _propTypes["default"].bool,
  trapFocusAfterOpen: _propTypes["default"].bool,
  returnFocusAfterClose: _propTypes["default"].bool,
  lockBodyAfterOpen: _propTypes["default"].bool,
  focusFirstChildAfterOpen: _propTypes["default"].bool,
  focusThisChildAfterOpen: _propTypes["default"].string,
  style: _propTypes["default"].shape({
    container: _propTypes["default"].object,
    overlay: _propTypes["default"].object,
    content: _propTypes["default"].object
  }),
  className: _propTypes["default"].string,
  overlayClassName: _propTypes["default"].string,
  role: _propTypes["default"].string,
  label: _propTypes["default"].string,
  labelledby: _propTypes["default"].string,
  children: _propTypes["default"].node
});

_defineProperty(OffCanvas, "defaultStyles", {
  overlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    zIndex: '900'
  },
  content: {
    position: 'fixed',
    zIndex: '1000',
    overflowY: 'auto',
    outline: 0
  }
});

_defineProperty(OffCanvas, "extraStyles", {
  container: {
    transition: 'transform 0.25s ease-out'
  },
  overlay: {
    background: 'rgba(255, 255, 255, 0.5)'
  },
  content: {
    background: 'rgba(0, 0, 0, 0.1)',
    transition: 'transform 0.25s ease-out'
  }
});