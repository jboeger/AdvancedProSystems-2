"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shouldLockBodyScroll = exports.shouldHideHorizontalScrollbar = exports.applyInitialPushStyles = exports.createPushStyles = exports.createStyles = exports.shouldShowContent = exports.hasClassName = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Sets the vertical or horizontal position of an element.
var setPosition = function setPosition(position) {
  var obj = {};
  obj[position] = '0';
  return obj;
};

var setContentTransformValue = function setContentTransformValue(position) {
  if (position === 'left') {
    return "translateX(-100%)";
  } else if (position === 'right') {
    return "translateX(100%)";
  } else if (position === 'top') {
    return "translateY(-100%)";
  } else {
    return "translateY(100%)";
  }
};

var setPushTransformValue = function setPushTransformValue(width, height, position) {
  if (position === 'left') {
    return "translateX(".concat(width, ")");
  } else if (position === 'right') {
    return "translateX(-".concat(width, ")");
  } else if (position === 'top') {
    return "translateY(".concat(height, ")");
  } else {
    return "translateY(-".concat(height, ")");
  }
}; // Checks whether an element has a className.


var hasClassName = function hasClassName(element) {
  return element && element.classList.length > 0;
};

exports.hasClassName = hasClassName;

var shouldShowContent = function shouldShowContent(content, isOpen) {
  if (content) {
    content.style.visibility = isOpen ? 'visible' : 'hidden';
  }
};

exports.shouldShowContent = shouldShowContent;

var createStyles = function createStyles(defaultStyles, extraStyles, isOpen, width, height, position, customStyles) {
  var positionProperty = setPosition(position);
  return {
    overlay: _objectSpread({}, defaultStyles.overlay, {}, extraStyles.overlay, {
      width: isOpen ? '100%' : ''
    }, customStyles.overlay),
    content: _objectSpread({}, defaultStyles.content, {}, extraStyles.content, {}, positionProperty, {
      width: width,
      height: height,
      transform: isOpen ? '' : setContentTransformValue(position)
    }, customStyles.content, {
      // !important
      // Off-Canvas element should be able to receive focus immediately.
      // https://allyjs.io/tutorials/focusing-in-animated-ui.html#remedy-2-caveat
      transitionProperty: isOpen ? 'transform' : ''
    })
  };
};

exports.createStyles = createStyles;

var createPushStyles = function createPushStyles(extraStyles, isOpen, width, height, position) {
  var styles = _objectSpread({}, extraStyles, {
    transform: isOpen ? setPushTransformValue(width, height, position) : ''
  });

  return function (element) {
    if (element) {
      // Apply the push styles
      for (var _i = 0, _Object$keys = Object.keys(styles); _i < _Object$keys.length; _i++) {
        var property = _Object$keys[_i];
        element.style[property] = styles[property];
      }
    }
  };
};

exports.createPushStyles = createPushStyles;

var applyInitialPushStyles = function applyInitialPushStyles(element, width, height, position) {
  if (element) {
    element.style.transform = setPushTransformValue(width, height, position);
  }
}; // Shows/hides the horizontal scrollbar.


exports.applyInitialPushStyles = applyInitialPushStyles;

var shouldHideHorizontalScrollbar = function shouldHideHorizontalScrollbar(isOpen) {
  var body = document.querySelector('body');
  body.style.overflowX = isOpen ? 'hidden' : '';
}; // should lock the body scroll when open


exports.shouldHideHorizontalScrollbar = shouldHideHorizontalScrollbar;

var shouldLockBodyScroll = function shouldLockBodyScroll(isOpen) {
  var body = document.querySelector('body');
  body.style.overflowY = isOpen ? 'hidden' : '';
};

exports.shouldLockBodyScroll = shouldLockBodyScroll;